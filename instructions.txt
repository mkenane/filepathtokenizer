


c:\windows\system32\drivers -> ['c:', 'windows', 'system32’, 'drivers', 'windows\system32\drivers']

General Asks
------------
- Use Python 3.x and follow pep 8 coding guidelines.
- Comment the code as if you were expecting someone else on the team to use your work.
- Assume you’ll get some invalid input. You’ll want to do some error checking.
- For this exercise to make sense, please don’t use the pathlib python package.
- Keep an eye out for any code re-use, refactoring, or object-orientation you might employ.
- Please do reach out if you get stuck or have questions.
- When done, send an archive of your work, your program, test execution & output of python --version.


Ultimately, we expect this will take 5-6 hours.  Finding that kind of time can be a challenge, so we’ll check in with you on progress if we haven’t heard from you in 72 hours.


The Problem
-----------
In the security industry it's common to deal with file paths.
  Unfortunately the out-of-box text indexing that is built into database
   applications often doesn't tokenize file paths in the most desirable way.
    Please create an object named FilePathTokenizer that implements the following
    methods (assume that you are getting Windows file paths but may be running on
    Linux or Windows operating systems):


tokenize_file_paths(file_paths):
+ Input - List of file paths
+ Output - Returns a dict where the key is the original file path,
and the value is a list of tokens extracted from the file path


tokenize_fd(fd):
+ Input - A file descriptor that points to a text file where each
line of the text file is a new file path
+ Output - Returns a dict where the key is the original file path,
and the value is a list of tokens extracted from the file path


tokenize_file_path(file_path):
+ Input - A single file path as a string
+ Output - Returns a dict where the key is the original file path,
and the value is a list of tokens extracted from the file path


Make sure you have unit tests for all functions you write.

How To Tokenize:


Tokenization should break each sub folder out into its own item in the list, it should also fabricate a token that contains all the directories excluding drive and filename:


c:\windows\system32\drivers -> ['c:', 'windows', 'system32’, 'drivers', 'windows\system32\drivers']


If a filename is found tokenization should be as follows:


[<filename>.<ext>, <filename>, <ext>]


Example:
c:\windows\system32\svchost.exe -> ['c:', 'windows’, 'system32', 'windows\system32', 'svchost.exe', 'svchost’, 'exe']


To be valid input, the file path must be absolute, not relative.




Delivery:
Please put this object in its own file. Create a second file where you implement a main routine (use argparse) that takes the following arguments:


-f or --filepaths | expects any number of file paths. You may assume that the file path is properly escaped for the platform on which it is running.
-i or --input | expects a file path to a file containing file paths
-s or --stdin | expects file paths on stdin


Your main routine should parse the arguments and call the corresponding methods on the FilePathTokenizer object, you should print the results to screen.


When you’re done, send us a zip / tar file with your code for review.  Please also send us the output of:


- Your program / test execution
- python --version (so we know what version you ran against)


If you get stuck or one of the instructions above is not clear, please reach out and we’ll see what we can do.
